name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: macos-latest

    env:
      CI: true  # To signal Lua scripts to handle CI-specific behavior

    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Install Neovim and Lua via Homebrew
      - name: Install Neovim and Lua
        run: |
          brew update
          brew install neovim lua

      # 3. Install Tungsten Plugin by Symlinking into Neovim's Plugin Directory
      - name: Install Tungsten Plugin
        run: |
          mkdir -p ~/.local/share/nvim/site/pack/plugins/start
          ln -s $GITHUB_WORKSPACE ~/.local/share/nvim/site/pack/plugins/start/tungsten

      # 4. Verify Tungsten Plugin Symlink
      - name: Verify Tungsten Plugin Installation
        run: |
          if [ ! -L ~/.local/share/nvim/site/pack/plugins/start/tungsten ]; then
            echo "‚ùå Tungsten plugin symlink not found."
            exit 1
          fi
          echo "‚úÖ Tungsten plugin symlink exists."

      # 5. Set up Minimal Neovim Configuration with Direct Plugin Loading
      - name: Set up Neovim Configuration
        run: |
          mkdir -p ~/.config/nvim
          cat <<EOF > ~/.config/nvim/init.lua
          -- Minimal init.lua for CI with direct plugin loading

          -- Debugging: Notify when Neovim starts
          vim.api.nvim_create_autocmd("VimEnter", {
            callback = function()
              vim.api.nvim_out_write("Neovim started successfully.\n")
            end
          })

          -- Attempt to require the Tungsten plugin
          local status, tungsten = pcall(require, 'tungsten')
          if not status then
            vim.api.nvim_err_writeln("Failed to load Tungsten plugin: " .. tungsten)
            return
          end

          -- Debugging: Confirm plugin loading
          vim.api.nvim_out_write("Tungsten plugin loaded successfully.\n")

          -- Initialize the Tungsten plugin
          tungsten.setup({
            -- Plugin-specific configurations if any
          })

          -- Debugging: Confirm plugin setup
          vim.api.nvim_out_write("Tungsten plugin setup completed.\n")
          EOF

      # 6. List Installed Plugins (Debugging Step)
      - name: List Installed Plugins
        run: |
          echo "üì¶ Listing installed plugins in ~/.local/share/nvim/site/pack/plugins/start/:"
          ls -la ~/.local/share/nvim/site/pack/plugins/start/

      # 7. List Available Neovim Commands (Debugging Step)
      - name: List Neovim Commands
        run: |
          echo "üìù Listing Neovim commands:"
          nvim --headless -c "command" -c "qa!"
      
      # 8. Run Tungsten Test Suite by Opening a Dummy .tex File and Executing Tests
      - name: Run Tungsten Test Suite
        run: |
          # Ensure logs directory exists
          mkdir -p logs
          
          # Create a dummy .tex file to trigger plugin loading (if necessary)
          echo "% Dummy TeX file to trigger plugin loading" > dummy.tex
          
          # Run Neovim headlessly and execute the test suite
          nvim --headless dummy.tex -c "TungstenUnitTests" -c "qa!"
        env:
          XDG_CONFIG_HOME: ~/.config  # Ensure Neovim uses the correct config

      # 9. Upload Test Logs
      - name: Upload Test Logs
        if: always()  # Ensure this step runs even if previous steps fail
        uses: actions/upload-artifact@v3
        with:
          name: test-logs
          path: logs/test_logs.txt

      # 10. Display Test Logs (Optional)
      - name: Display Test Logs
        if: always()
        run: |
          if [ -f logs/test_logs.txt ]; then
            echo "üìÑ === Test Logs ==="
            cat logs/test_logs.txt
            echo "üìÑ ================="
          else
            echo "‚ö†Ô∏è No test logs found."
          fi
