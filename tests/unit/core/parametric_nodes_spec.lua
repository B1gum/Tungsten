describe("Parametric and Polar AST nodes", function()
	local ast = require("tungsten.core.ast")

	it("creates and identifies Parametric2D", function()
		local x = ast.create_variable_node("t")
		local y = ast.create_variable_node("t")
		local node = ast.create_parametric2d_node(x, y)
		assert.is_true(ast.is_parametric2d_node(node))
		assert.are.equal("Parametric2D(t,t)", ast.canonical(node))
	end)

	it("creates and identifies Parametric3D", function()
		local u = ast.create_variable_node("u")
		local v = ast.create_variable_node("v")
		local w = ast.create_variable_node("w")
		local node = ast.create_parametric3d_node(u, v, w)
		assert.is_true(ast.is_parametric3d_node(node))
		assert.are.equal("Parametric3D(u,v,w)", ast.canonical(node))
	end)

	it("creates and identifies Polar2D", function()
		local r = ast.create_variable_node("r")
		local node = ast.create_polar2d_node(r)
		assert.is_true(ast.is_polar2d_node(node))
		assert.are.equal("Polar2D(r)", ast.canonical(node))
	end)
end)
