local ast = require("tungsten.core.ast")

describe("plot AST nodes", function()
	it("constructors and type guards", function()
		local seq = ast.create_sequence_node({})
		assert.is_true(ast.is_sequence_node(seq))
		local p2 = ast.create_point2_node(ast.create_number_node(1), ast.create_number_node(2))
		assert.is_true(ast.is_point2_node(p2))
		local p3 = ast.create_point3_node(ast.create_number_node(1), ast.create_number_node(2), ast.create_number_node(3))
		assert.is_true(ast.is_point3_node(p3))
		local eq = ast.create_equality_node(ast.create_number_node(1), ast.create_number_node(1))
		assert.is_true(ast.is_equality_node(eq))
		local ineq = ast.create_inequality_node(ast.create_number_node(1), "<", ast.create_number_node(2))
		assert.is_true(ast.is_inequality_node(ineq))
		local para2 = ast.create_parametric2d_node(ast.create_variable_node("t"), ast.create_variable_node("t"))
		assert.is_true(ast.is_parametric2d_node(para2))
		local para3 = ast.create_parametric3d_node(
			ast.create_variable_node("u"),
			ast.create_variable_node("v"),
			ast.create_variable_node("u")
		)
		assert.is_true(ast.is_parametric3d_node(para3))
		local polar = ast.create_polar2d_node(ast.create_variable_node("theta"))
		assert.is_true(ast.is_polar2d_node(polar))
	end)

	it("canonicalization stable for identical structures", function()
		local a = ast.create_point2_node(ast.create_number_node(1), ast.create_number_node(2))
		local b = ast.create_point2_node(ast.create_number_node(1), ast.create_number_node(2))
		assert.are.equal(ast.canonical(a), ast.canonical(b))
	end)

	it("canonicalization differs for different structures", function()
		local a = ast.create_point2_node(ast.create_number_node(1), ast.create_number_node(2))
		local b = ast.create_point2_node(ast.create_number_node(2), ast.create_number_node(1))
		assert.are_not.equal(ast.canonical(a), ast.canonical(b))
	end)

	it("sequence canonicalization respects order", function()
		local seq1 = ast.create_sequence_node({ ast.create_number_node(1), ast.create_number_node(2) })
		local seq2 = ast.create_sequence_node({ ast.create_number_node(1), ast.create_number_node(2) })
		local seq3 = ast.create_sequence_node({ ast.create_number_node(2), ast.create_number_node(1) })
		assert.are.equal(ast.canonical(seq1), ast.canonical(seq2))
		assert.are_not.equal(ast.canonical(seq1), ast.canonical(seq3))
	end)

	it("inequality canonicalization includes operator", function()
		local lt = ast.create_inequality_node(ast.create_number_node(1), "<", ast.create_number_node(2))
		local gt = ast.create_inequality_node(ast.create_number_node(1), ">", ast.create_number_node(2))
		assert.are_not.equal(ast.canonical(lt), ast.canonical(gt))
	end)
end)
