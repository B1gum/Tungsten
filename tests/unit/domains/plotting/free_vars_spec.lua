local ast = require("tungsten.core.ast")
local free_vars = require("tungsten.domains.plotting.free_vars")

describe("free variable detection", function()
	it("finds variables in a simple expression", function()
		local x = ast.create_variable_node("x")
		local y = ast.create_variable_node("y")
		local expr = ast.create_binary_operation_node("+", x, y)
		assert.are.same({ "x", "y" }, free_vars.find(expr))
	end)

	it("excludes bound variables in integrals", function()
		local x = ast.create_variable_node("x")
		local y = ast.create_variable_node("y")
		local integrand = ast.create_binary_operation_node("*", x, y)
		local integral = ast.create_indefinite_integral_node(integrand, x)
		assert.are.same({ "y" }, free_vars.find(integral))
	end)

	it("handles definite integrals with bounds", function()
		local x = ast.create_variable_node("x")
		local y = ast.create_variable_node("y")
		local z = ast.create_variable_node("z")
		local integrand = ast.create_binary_operation_node("*", x, y)
		local integral = ast.create_definite_integral_node(integrand, x, ast.create_number_node(0), z)
		assert.are.same({ "y", "z" }, free_vars.find(integral))
	end)
end)
